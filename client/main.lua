function love.load()
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = {
        log = function(message)
            local timestamp = os.date("[%Y-%m-%d %H:%M:%S]")
            local logMessage = timestamp .. " MAIN: " .. tostring(message)
            print(logMessage)
            
            -- –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            local success, file = pcall(love.filesystem.newFile, "game_log.txt", "a")
            if success and file then
                pcall(function()
                    file:open("a")
                    file:write(logMessage .. "\n")
                    file:close()
                end)
            end
        end
    }
    
    logger:log("=== RPG ONLINE GAME ===")
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    logger:log("Initializing game systems...")
    
    -- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
    local success, json_lib = pcall(require, "json")
    if success then
        json = json_lib
        logger:log("JSON library loaded")
    else
        json = {
            encode = function(t) return "{}" end,
            decode = function(s) return {} end
        }
        logger:log("‚ùå JSON library not found, using dummy")
    end
    
    -- –ó–∞–≥—Ä—É–∑–∫–∞ NetworkManager
    local success, nm = pcall(require, "NetworkManager")
    if success then
        NetworkManager = nm
        NetworkManager:initialize()
        logger:log("NetworkManager initialized")
    else
        logger:log("‚ùå NetworkManager not found, using offline mode")
        NetworkManager = {
            connected = false,
            isWaitingForNameInput = function() return true end,
            getNameInputText = function() return "" end,
            setNameInputText = function(text) end,
            confirmNameInput = function() end,
            connect = function() return false end
        }
    end
    
    -- –§–ª–∞–≥ —á—Ç–æ –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    gameInitialized = false
    
    logger:log("All game systems initialization completed")
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
function initializeGame()
    if gameInitialized then
        print("[INIT] Game already initialized")
        return true
    end

    print("[INIT] Initializing game after login...")
    print("[INIT] Logger type: " .. type(logger))

    -- –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ GameState
    print("[INIT] Loading GameState...")
    local success, gs = pcall(require, "src/core/GameState")
    if success then
        GameState = gs
        print("[INIT] ‚úÖ Original GameState loaded")
    else
        print("[INIT] ‚ùå Original GameState not found: " .. tostring(gs))
        return false
    end

    -- –ó–∞–≥—Ä—É–∑–∫–∞ Player
    print("[INIT] Loading Player...")
    local success, player = pcall(require, "src/entities/Player")
    if success then
        Player = player
        print("[INIT] ‚úÖ Player class loaded")
    else
        print("[INIT] ‚ùå Player class not found: " .. tostring(player))
        return false
    end

    -- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ Scene
    print("[INIT] Loading Scene base class...")
    local success, scene = pcall(require, "src/scenes/Scene")
    if success then
        Scene = scene
        print("[INIT] ‚úÖ Scene base class loaded")
    else
        print("[INIT] ‚ùå Scene base class not found: " .. tostring(scene))
        return false
    end

    -- –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω
    print("[INIT] Loading game scenes...")

    -- –ó–∞–≥—Ä—É–∑–∫–∞ GameScene
    print("[INIT] Loading GameScene...")
    local success, gscene = pcall(require, "src/scenes/GameScene")
    if success then
        GameScene = gscene
        print("[INIT] ‚úÖ Original GameScene loaded")
    else
        print("[INIT] ‚ùå Original GameScene not found: " .. tostring(gscene))
        return false
    end

    -- –ó–∞–≥—Ä—É–∑–∫–∞ InventoryScene
    print("[INIT] Loading InventoryScene...")
    local success, iscene = pcall(require, "src/scenes/InventoryScene")
    if success then
        InventoryScene = iscene
        print("[INIT] ‚úÖ Original InventoryScene loaded")
    else
        print("[INIT] ‚ùå Original InventoryScene not found: " .. tostring(iscene))
        -- –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    end

    -- –ó–∞–≥—Ä—É–∑–∫–∞ StatsScene
    print("[INIT] Loading StatsScene...")
    local success, sscene = pcall(require, "src/scenes/StatsScene")
    if success then
        StatsScene = sscene
        print("[INIT] ‚úÖ Original StatsScene loaded")
    else
        print("[INIT] ‚ùå Original StatsScene not found: " .. tostring(sscene))
        -- –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É –µ—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    end

    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GameState
    print("[INIT] Initializing GameState...")
    if GameState.initialize then
        GameState:initialize()
        print("[INIT] ‚úÖ GameState initialized")
    else
        print("[INIT] ‚ùå GameState.initialize method not found")
        return false
    end

    -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    print("[INIT] Creating player...")
    if Player and Player.new then
        GameState.player = Player:new()
        print("[INIT] ‚úÖ Player created")
    else
        print("[INIT] ‚ùå Cannot create player - Player.new not found")
        return false
    end

    -- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω
    print("[INIT] Creating scenes...")
    if GameScene and GameScene.new then
        GameState.scenes = GameState.scenes or {}
        GameState.scenes.game = GameScene:new()
        print("[INIT] ‚úÖ GameScene created")
    else
        print("[INIT] ‚ùå Cannot create GameScene - GameScene.new not found")
        return false
    end

    if InventoryScene and InventoryScene.new then
        GameState.scenes.inventory = InventoryScene:new()
        print("[INIT] ‚úÖ InventoryScene created")
    else
        print("[INIT] ‚ö†Ô∏è Cannot create InventoryScene")
    end

    if StatsScene and StatsScene.new then
        GameState.scenes.stats = StatsScene:new()
        print("[INIT] ‚úÖ StatsScene created")
    else
        print("[INIT] ‚ö†Ô∏è Cannot create StatsScene")
    end

    -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GameScene –∫–∞–∫ —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
    print("[INIT] Setting current scene...")
    GameState.currentScene = GameState.scenes.game
    if GameState.currentScene then
        print("[INIT] ‚úÖ Game scene set as current")
    else
        print("[INIT] ‚ùå Failed to set current scene")
        return false
    end

    gameInitialized = true
    print("[INIT] üéÆ Game initialization completed successfully!")
    return true
end

function love.update(dt)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dt —á–∏—Å–ª–æ
    if type(dt) ~= "number" then
        dt = 0.016 -- fallback 60 FPS
    end
    
    -- –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
    if NetworkManager:isWaitingForNameInput() then
        return
    end
    
    -- –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
    if not NetworkManager.connected then
        if NetworkManager.connect then
            local success = NetworkManager:connect("ws://localhost:3000")
            if not success then
                logger:log("‚ùå Connection failed: " .. (NetworkManager.lastError or "unknown error"))
            end
        end
        return
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç—å –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã (—ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç receive())
    if NetworkManager.connected and NetworkManager.update then
        NetworkManager:update(dt)
    end
    
    -- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è player_id –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if not gameInitialized and NetworkManager.connected and NetworkManager.playerId then
        print("üéØ Player ID received, initializing game...")
        if initializeGame() then
            logger:log("‚úÖ Game ready to play!")
        else
            logger:log("‚ùå Failed to initialize game")
        end
    end
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
    if gameInitialized and GameState and GameState.currentScene and GameState.currentScene.update then
        GameState.currentScene:update(dt)
    end
end

function love.draw()
    -- –ï—Å–ª–∏ –∂–¥–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞
    if NetworkManager:isWaitingForNameInput() then
        love.graphics.setColor(1, 1, 1, 1)
        love.graphics.setFont(love.graphics.newFont(16))
        love.graphics.print("Enter your character name:", 100, 100)
        love.graphics.print(NetworkManager:getNameInputText(), 100, 130)
        love.graphics.print("Press ENTER to confirm", 100, 160)
        love.graphics.print("Name must be 3-15 characters, English letters/numbers only", 100, 190)
        return
    end
    
    -- –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if not gameInitialized then
        love.graphics.setColor(1, 1, 1, 1)
        love.graphics.setFont(love.graphics.newFont(16))
        love.graphics.print("Connecting to server...", 100, 100)
        love.graphics.print("Network: " .. (NetworkManager.connected and "ONLINE" or "OFFLINE"), 100, 130)
        love.graphics.print("Status: " .. (NetworkManager.lastError or "Connected, waiting for login response..."), 100, 160)
        love.graphics.print("Player ID: " .. (NetworkManager.playerId or "Not assigned"), 100, 190)
        love.graphics.print("Game Initialized: " .. tostring(gameInitialized), 100, 220)
        love.graphics.print("Initializing game...", 100, 250)
        return
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ GameState –∏ —Ç–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not GameState then
        love.graphics.setColor(1, 0, 0, 1)
        love.graphics.print("ERROR: GameState is nil!", 100, 100)
        return
    end
    
    if not GameState.currentScene then
        love.graphics.setColor(1, 0, 0, 1)
        love.graphics.print("ERROR: No current scene!", 100, 100)
        return
    end
    
    -- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã
    if GameState.currentScene.draw then
        GameState.currentScene:draw()
    else
        love.graphics.setColor(1, 0, 0, 1)
        love.graphics.print("ERROR: Scene has no draw method!", 100, 100)
    end
    
    -- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    love.graphics.setColor(1, 1, 1, 1)
    love.graphics.print("Network: " .. (NetworkManager.connected and "ONLINE" or "OFFLINE"), 10, love.graphics.getHeight() - 30)
    love.graphics.print("Player: " .. (NetworkManager.playerName or "Unknown"), 10, love.graphics.getHeight() - 50)
end

function love.textinput(t)
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if NetworkManager:isWaitingForNameInput() then
        local current = NetworkManager:getNameInputText()
        
        -- –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
        local allowed = string.match(t, "[%a%d%-_ ]")
        if allowed and #current < 15 then  -- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            NetworkManager:setNameInputText(current .. allowed)
        end
        return
    end
    
    -- –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –∏–≥—Ä—ã
    if gameInitialized and GameState.currentScene and GameState.currentScene.textinput then
        GameState.currentScene:textinput(t)
    end
end

function love.keypressed(key)
    -- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if NetworkManager:isWaitingForNameInput() then
        if key == "backspace" then
            local current = NetworkManager:getNameInputText()
            NetworkManager:setNameInputText(current:sub(1, -2))
        elseif key == "return" then
            local name = NetworkManager:getNameInputText()
            if #name >= 3 and #name <= 15 then
                if NetworkManager.confirmNameInput then
                    NetworkManager:confirmNameInput()
                end
                logger:log("Character name confirmed: " .. name)
            else
                logger:log("‚ùå Invalid name length: " .. tostring(#name) .. " characters")
            end
        end
        return
    end
    
    -- –ü–µ—Ä–µ–¥–∞—á–∞ –∫–ª–∞–≤–∏—à–∏ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω–µ
    if gameInitialized and GameState.currentScene and GameState.currentScene.keypressed then
        GameState.currentScene:keypressed(key)
    end
end

function love.mousepressed(x, y, button)
    -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º—ã—à–∏
    if type(x) == "number" and type(y) == "number" then
        if gameInitialized and GameState.currentScene and GameState.currentScene.mousepressed then
            GameState.currentScene:mousepressed(x, y, button)
        end
    end
end

function love.quit()
    -- –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if NetworkManager.connected and NetworkManager.disconnect then
        NetworkManager:disconnect()
    end
    
    return false
end